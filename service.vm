/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder($SRC)};

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.exceptions.${entity.name}NotFoundException;
import ${ROOT_PKG}.repository.${entity.name}Repository;

@Service
@Transactional(rollbackFor=${entity.name}NotFoundException.class)
public class ${entity.name}Service 
{
	private static Logger logger = LoggerFactory.getLogger(${entity.name}Service.class);
	
	@Autowired
	private ${entity.name}Repository ${entity.name.toLowerCase()}Repository;
		
	/*
	 * READ methods
	 */
	public Page<${entity.name}> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("${entity.name}Service -> findAll ${entity.name}s");
		
		return ${entity.name.toLowerCase()}Repository.findAll(new PageRequest(page, count));
	}

	public Iterable<${entity.name}> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("${entity.name}Service -> findAll ${entity.name}s");
		
		return ${entity.name.toLowerCase()}Repository.findAll();
	}
/*
	public ${entity.name} findBySfid(String ${entity.name.toLowerCase()}){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ${entity.name} with sfid:" + ${entity.name.toLowerCase()});
		
		return ${entity.name.toLowerCase()}Repository.findBySfid(${entity.name.toLowerCase()});
		
	}
*/
	public ${entity.name} get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ${entity.name} with id:" + id);
		
		${entity.name} elementToGet = ${entity.name.toLowerCase()}Repository.findOne(id);
		
		if (elementToGet == null)
			throw new ${entity.name}NotFoundException(id);
		
		return elementToGet;
	}

	public ${entity.name} create(${entity.name} ${entity.name.toLowerCase()}) {

		if (logger.isDebugEnabled())
			logger.debug("${entity.name}Service -> create:" + ${entity.name.toLowerCase()});
			
		return ${entity.name.toLowerCase()}Repository.save(${entity.name.toLowerCase()});
	}

	public ${entity.name} update(${entity.name} ${entity.name.toLowerCase()}) {
		
		if (logger.isDebugEnabled())
			logger.debug("${entity.name}Service -> create:" + ${entity.name.toLowerCase()});

		${entity.name} elementToUpdate = ${entity.name.toLowerCase()}Repository.findOne(${entity.name.toLowerCase()}.getId());
		
		if (elementToUpdate == null)
			throw new ${entity.name}NotFoundException(${entity.name.toLowerCase()}.getName());
		
		elementToUpdate.update(${entity.name.toLowerCase()});
		${entity.name.toLowerCase()}Repository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public ${entity.name} delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("${entity.name}Service -> delete:" + id);

		${entity.name} elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new ${entity.name}NotFoundException(id);
		
		${entity.name.toLowerCase()}Repository.delete(elementToDelete);

		return elementToDelete;
	}

}

